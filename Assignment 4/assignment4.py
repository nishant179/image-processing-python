# -*- coding: utf-8 -*-
"""Assignment4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EaYEYS4rToNVGZpWxBpWkAQyMd7qb3v2
"""

#I have done this assignment 4 on my own as I was not able to find a team partner for the project. So i completed some tasks of about half the total points 
#Nishant Thakre 
#Roll No =200070051

import cv2
import pywt
from matplotlib import pyplot as plt
import numpy as np
from google.colab.patches import cv2_imshow
from skimage import exposure
from math import log10, sqrt
from scipy.ndimage.filters import gaussian_filter
#importing all the libraries required for different parts of questions
import os
import sys
import random
import tensorflow as tf
from tensorflow import keras

#code for question 1
from google.colab import drive
drive.mount('/content/drive')

#code for question 1
import glob
path = "/content/drive/MyDrive/610_assignment_4/MoNuSeg-Training-Data/Binary-Mask/*.*"
y_bin_train=[]
for file in glob.glob(path):
   #print(file)
   a= cv2.imread(file,0)
   a=a[:256,:256]
   a.astype(np.float32)
   y_bin_train.append(a)
   #print(a)
y_bin_train=np.array(y_bin_train)
y_bin_train=np.expand_dims(y_bin_train,axis=3)
#refrence : https://stackoverflow.com/questions/51857468/google-colab-how-to-loop-through-images-in-a-folder

#code for question 1
path = "/content/drive/MyDrive/610_assignment_4/MoNuSeg-Test-Data/Binary-Mask/*.*"
y_bin_test=[]
for file in glob.glob(path):
   #print(file)
   a= cv2.imread(file,0)
   a=a[:256,:256]
   a.astype(np.float32)
   y_bin_test.append(a)
   #print(a)
y_bin_test=np.array(y_bin_test)
y_bin_test=np.expand_dims(y_bin_test,axis=3)

#code for question 1
path = "/content/drive/MyDrive/610_assignment_4/MoNuSeg-Training-Data/Tissue-Images/*.*"
x_tis_train=[]
for file in glob.glob(path):
   #print(file)
   a= cv2.imread(file,0)
   a=a[:256,:256]
   a.astype(np.float32)
   x_tis_train.append(a)
   #print(a)
x_tis_train=np.expand_dims(x_tis_train,axis=3)

#code for question 1
path = "/content/drive/MyDrive/610_assignment_4/MoNuSeg-Test-Data/Tissue-Images/*.*"
x_tis_test=[]
for file in glob.glob(path):
   #print(file)
   a= cv2.imread(file,0)
   a=a[:256,:256]
   a.astype(np.float32)
   x_tis_test.append(a)
   #print(a)
x_tis_test=np.array(x_tis_test)
x_tis_test=np.expand_dims(x_tis_test,axis=3)

cv2_imshow(y_bin_train[1])

#code for question 1
cv2_imshow(x_tis_train[0])

#code for question 1
cv2_imshow(y_bin_test[0])

#code for question 1
cv2_imshow(x_tis_test[0])

#code for question 2
def down_block(x, filters, kernel_size=(3, 3), padding="same", strides=1):
    c = keras.layers.Conv2D(filters, kernel_size, padding=padding, strides=strides, activation="relu")(x)
    c = keras.layers.Conv2D(filters, kernel_size, padding=padding, strides=strides, activation="relu")(c)
    p = keras.layers.MaxPool2D((2, 2), (2, 2))(c)
    return c, p

def up_block(x, skip, filters, kernel_size=(3, 3), padding="same", strides=1):
    us = keras.layers.UpSampling2D((2, 2))(x)
    concat = keras.layers.Concatenate()([us, skip])
    c = keras.layers.Conv2D(filters, kernel_size, padding=padding, strides=strides, activation="relu")(concat)
    c = keras.layers.Conv2D(filters, kernel_size, padding=padding, strides=strides, activation="relu")(c)
    return c

def bottleneck(x, filters, kernel_size=(3, 3), padding="same", strides=1):
    c = keras.layers.Conv2D(filters, kernel_size, padding=padding, strides=strides, activation="relu")(x)
    c = keras.layers.Conv2D(filters, kernel_size, padding=padding, strides=strides, activation="relu")(c)
    return c
def UNet():
    f = [16, 32, 64, 128, 256]
    inputs = keras.layers.Input((256,256, 1))
    
    p0 = inputs
    c1, p1 = down_block(p0, f[0]) #128 -> 64
    c2, p2 = down_block(p1, f[1]) #64 -> 32
    c3, p3 = down_block(p2, f[2]) #32 -> 16
    c4, p4 = down_block(p3, f[3]) #16->8
    
    bn = bottleneck(p4, f[4])
    
    u1 = up_block(bn, c4, f[3]) #8 -> 16
    u2 = up_block(u1, c3, f[2]) #16 -> 32
    u3 = up_block(u2, c2, f[1]) #32 -> 64
    u4 = up_block(u3, c1, f[0]) #64 -> 128
    
    outputs = keras.layers.Conv2D(1, (1, 1), padding="same", activation="sigmoid")(u4)
    model = keras.models.Model(inputs, outputs)
    return model
#refrence : https://github.com/nikhilroxtomar/UNet-Segmentation-in-Keras-TensorFlow
#the github link was given in the description of the youtube video provided in ms teams for refrence

#code for question 2
print(x_tis_train.max())
print(x_tis_test.max())
print(np.unique(y_bin_train))
print(np.unique(y_bin_test))
#getting maximum size

#code for question 2
x_tis_train= x_tis_train/255
x_tis_test= x_tis_test/249
# Scaling the masks from 0 to 1
y_bin_train= y_bin_train/255
y_bin_test= y_bin_test/255
# for normalization

#code for question 2
model = UNet()
model.compile(optimizer="adam", loss="binary_crossentropy", metrics=["acc"])
model.summary()
#refrence : https://github.com/nikhilroxtomar/UNet-Segmentation-in-Keras-TensorFlow

print(np.shape(x_tis_train))

print(np.shape(y_bin_train))

#code for question 3
from sklearn.model_selection import train_test_split
x_tis_train, x_tis_valid, y_bin_train, y_bin_valid = train_test_split(x_tis_train,y_bin_train, test_size=.2, random_state=1234)

#code for question 3
def dice_score(y_bin_test,y_predict,smooth=1e-5):
  #y_predict=y_predict.astype(np.unit8)
  intersection=tf.reduce_sum(y_bin_test*y_predict)
  return (2.*intersection+smooth)/(tf.reduce_sum(tf.square(y_bin_test))+tf.reduce_sum(tf.square(y_predict))+smooth)
def dice_loss(y_bin_test,y_predict):
  return 1-dice_score(y_bin_test,y_predict)
model.compile(optimizer=tf.keras.optimizers.SGD(learning_rate=0.01),loss=dice_loss,metrics=['accuracy',dice_score])
#refrence https://github.com/keras-team/keras/issues/3611

#code for question 3
#fitting the model
a=model.fit(x_tis_train,y_bin_train,batch_size=1,verbose=1,epochs=30,validation_data=(x_tis_valid,y_bin_valid),shuffle=False)

#code for question 4
threshold=0.5
test_number=np.random.randint(0,13) #genrates random no
test_img=x_tis_test[test_number] #gets test image at serial no = that random no
original=y_bin_test[test_number] #oringal y image mask
input_img_test=np.expand_dims(test_img,0) 
print(input_img_test.shape)
predict=(model.predict(input_img_test)[0,:,:,0]>threshold).astype(np.uint8) #predicted mask and converts float32 to uint8 if value goes above threshold
print(predict.shape)

plt.figure(figsize=(16,8)) #figure size
plt.subplot(231)
plt.title('Test images') 
plt.imshow(test_img[:,:,0],cmap='gray')
plt.subplot(232)
plt.title('Testing label')
plt.imshow(original[:,:,0],cmap='gray')
plt.subplot(233)
plt.title('Prediction of test image')
plt.imshow(predict,cmap='gray')
plt.show()

threshold=0.5
test_number=np.random.randint(0,13)
test_img=x_tis_test[test_number]
original=y_bin_test[test_number]
input_img_test=np.expand_dims(test_img,0)
print(input_img_test.shape)
predict=(model.predict(input_img_test)[0,:,:,0]>threshold).astype(np.uint8)
print(predict.shape)

plt.figure(figsize=(16,8))
plt.subplot(231)
plt.title('Test images')
plt.imshow(test_img[:,:,0],cmap='gray')
plt.subplot(232)
plt.title('Testing label')
plt.imshow(original[:,:,0],cmap='gray')
plt.subplot(233)
plt.title('Prediction of test image')
plt.imshow(predict,cmap='gray')
plt.show()

threshold=0.5
test_number=np.random.randint(0,13)
test_img=x_tis_test[test_number]
original=y_bin_test[test_number]
input_img_test=np.expand_dims(test_img,0)
print(input_img_test.shape)
predict=(model.predict(input_img_test)[0,:,:,0]>threshold).astype(np.uint8)
print(predict.shape)

plt.figure(figsize=(16,8)) #figure size
plt.subplot(231)
plt.title('Test images')
plt.imshow(test_img[:,:,0],cmap='gray')
plt.subplot(232)
plt.title('Testing label')
plt.imshow(original[:,:,0],cmap='gray')
plt.subplot(233)
plt.title('Prediction of test image')
plt.imshow(predict,cmap='gray')
plt.show()

threshold=0.5
test_number=np.random.randint(0,13)
test_img=x_tis_test[test_number]
original=y_bin_test[test_number]
input_img_test=np.expand_dims(test_img,0)
print(input_img_test.shape)
predict=(model.predict(input_img_test)[0,:,:,0]>threshold).astype(np.uint8)
print(predict.shape)

plt.figure(figsize=(16,8))
plt.subplot(231)
plt.title('Test images')
plt.imshow(test_img[:,:,0],cmap='gray')
plt.subplot(232)
plt.title('Testing label')
plt.imshow(original[:,:,0],cmap='gray')
plt.subplot(233)
plt.title('Prediction of test image')
plt.imshow(predict,cmap='gray')
plt.show()

threshold=0.5
test_number=np.random.randint(0,13)
test_img=x_tis_test[test_number]
original=y_bin_test[test_number]
input_img_test=np.expand_dims(test_img,0)
print(input_img_test.shape)
predict=(model.predict(input_img_test)[0,:,:,0]>threshold).astype(np.uint8)
print(predict.shape)

plt.figure(figsize=(16,8))
plt.subplot(231)
plt.title('Test images')
plt.imshow(test_img[:,:,0],cmap='gray')
plt.subplot(232)
plt.title('Testing label')
plt.imshow(original[:,:,0],cmap='gray')
plt.subplot(233)
plt.title('Prediction of test image')
plt.imshow(predict,cmap='gray')
plt.show()



















